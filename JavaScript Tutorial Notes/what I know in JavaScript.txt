


1) Data types & Variables

var, let , const


2) Declaring variables (var a;)


3) Initializing variables (initialsing means var a = 2;)


4) Uninitailising variables (means not set to anything)


5) camelcase (declaration and assignment both should match)     


6)Adding Numbers


7)Substraction Number


8) Multiplaication of Numbers


9) Divsision of Numbers


10)  Incrementing Numbers


11) Incrementing myvar (myvar++;) & Decrmenting myvar  (myvar--;)


12) Decimal Numbers (Anything has a point in it)


13) Multiplying Decimals (2.0 * 2.0)


14) Divide Decimals (10.0 / 2.1)


15) Finding a Reminder (if you divide a number by 2 and remainder is zero then the number is even) 
    (var remainder = 20 % 2;)


16) COMPOUND ASSIGNMENT WITH AUGMENTED ADDITION (+=)

                         var a=3;

    normal way           var a = a + 2;

    augmented addition   a += 2;


17) COMPOUND ASSIGNMENT WITH AUGMENTED  SUBSTRACTION (-=)


18) COMPOUND ASSIGNMENT WITH AUGMENTED MULTIPLICATION (*=)


19) COMPOUND ASSIGNMENT WITH AUGMENTED DIVISION (/=)


20) DECLARE STRING VARIABLES 

    //example

    var firstName = "Alan" 



21) ESCAPING LITERAL QUOTES IN STRINGS

    \escp character to put before quotation marks

    means no longer last character

    var myStr = "I am a \"double quoted\" string inside \"double quotes"";


22) QUOTING STRINGS WITH SINGLE QUOTES

   var myStr = "<a href=\"http://www.example.com\" target=\"_blank\">link</a>;

                                        or

   var myStr = '<a href="http://www.example.com" target="_blank">link</a>';

   single' can also be used to escape instead of \ or we can alos use back text `` at beginging and ending.
   by doing so we can use both single & Double quote



23) ESCAPE SEQUENCE IN STRINGS


     \' single quote

     \" double quote

     \\ backslash

     \b backspace

     \t tab

     \n newline

     \r carraiage return

     \f form feed


     example  // var myStr = "FirstLine\n\t\\SecondLine\nThirdLine";

     ** first line then , new line, tab, then second line, then third line.



24) CONCATENATING STRINGS WITH PLUS OPERATOR

     var myStr = "This is the start. " + "This is the end."
     console.log(myStr);


25) CONCATENATING STRINGS WITH PLUS EQUAL OPERATOR

    var ourStr = "I come first. ";
    ourStr += "I come second. ";



26) CONSTRUCTING STRINGS WITH VARIABLES

    var ourName = " freecodecamp";
    var ourStr = " Hello, our name is " + our name + ", how are you?";


27) APPENDING VARIABLES TO STRINGS

    var anAdjective ="awesome!";
    var ourStr = "freeCodeCamp is ";
    ourStr += anAdjective;


28) FIND LENGTH OF STRING

    var firstNameLength = 0;
    var firstName = "Ada";
    firstNameLength = firstName.length;


29) BRACKET NOTATION TO FIND FIRST CHARACTER IN STRING

    var firstLetterOfFirstName = "";
    var firstName = "Ada";
    firstLetterOfFirstName = firstName[0];


30) BRACKET NOTATION TO FIND NTH CHARACTER IN STRING

    var firstName = "Ada";
    var secondLetterOfFirstName = firstName[1];


31) BRACKET NOTATION TO LAST CHARACTER IN STRING

    var firstName = "Ada";
    var lastLetterOfFirstName = firstName[firstName.length - 1];
        

32) BRACKET NOTATION TO FIND NTH TO LAST CHARACTER IN STRING 

    var firstName = "Ada";
    var thirdToLastLetterOfFirstName = firstName[firstName.length-3];


33) STRING IMMUTABILITY

    (MEANS THEY CANNOT BE ALTERED ONCE CREATED, DOESNT MEAN CANNOT BE CHANGED 
    BUT INDIVIDUAL CHARCTER CANNOT BE CHANGED)

     var myStr = "Jello World";
     myStr[0] = "H"; // Fix me 

     ** if we run this code means we get error

     so we need to do

     myStr = "Hello World";


34) WORD Blanks 

function wordBlanks(myNoun, myAdjective, myVerb, myAdverb) {
var result = "";
result += "The" + myAdjective + " " + myNoun + " "+ myVerb + " to the store " + myAdverb
return result;
}
console.log(wordBlanks("dog", "big", "ran", "quickly"));


35) STORE MULTIPLE VALUES WITH ARRAYS

    arrays allow to store several piece of data in one place.
    arrays always start with the bracket and end with the bracket.
    every element in the array is separated by the comma, 
    in the firt element is the string and second element is the number.we can use any type of data.

    var ourArray = ["John", 23];

36) NESTED ARRAYS 
    when one of the element in array is another array that is called nested array or a multi-dimensional array.

    var ourArray = [["the universe", 42], ["everything", 101010]];


37) ACCESS ARRAY DATA WITH INDEXES

    var ourArray = [50,60,70];
    var ourData = ourArray[0]; // equals 50


38) MODIFY ARRAY DATA WITH INDEXES



39) MODIFY ARRAY DATA WITH INDEXES

    we were not able to modify a string using bracket notation. but with arrays you can.
    var ourArray = [18,64,99];
    ourArray[1] = 45; // ourArray now equals [18, 45, 99].

40) ACCESS MULTI-DIMENSIONAL ARRAYS WITH INDEXES
    to access arrays in array we use double bracket
    1st bracket indicates the set which we want
    2nd bracket indicates the particular element in the bracket

    if we want the number to get 8 means.

    var myArray = [[1,2,3], [4,5,6], [7,8,9], [[10,11,12], 13, 14]];
    var myData = myArray [2][1]


41) MANIPULATE ARRAYS WITH POP()

    ** we can remove an item from an array using pop function.
    ** removes the last element inside the final element.

    var ourArray = [1,2,3];
    var removedFromOurArray = ourArray.pop();
    // removedFromOurArray now equals 3, and ourArray now equals [1,2]


42) MANIPULATE ARRAYS WITH SHIFT ()

   similar to pop but it removes the FIRST ELEMENT INSIDE THE FINAL ELEMENT


43)MANIPULATE ARRAYS WITH push()

   push adds in the last


44) MANIPULATE ARRAYS WITH UNSHIFT ()

   similar with push function while push adds in the last but unshift adds in the beginning.


45) Shopping List

    var myList = [["cereal", 3], ["milk", 2], ["bananas", 3], ["juice", 2], ["eggs", 12]];



46) WRITE REUSABLE CODE WITH FUNCTIONS

    // Example

    function ourReusableFunction() {
    console.log("Heyya, world");
    }

    ourReusableFunction();


47) PASSING VALUES TO FUNCTIONS WITH ARGUMENTS

    //Example


    function ourFunctionWithArgs(a, b) {
    console.log(a-b);
    }

48) GLOBAL SCOPE AND FUNCTIONS

    ** scope refers to visibility of variables.
    variables which are defined outside the function block are global scope.
    global scope mean they can be seen everywhere in javascript.

   != means does not equal 


49) LOCAL SCOPE AND FUNCTIONS

    ** variables which are declared within the function as well as function parameter have local scope.
    that means they are only visible within the function.

    function myLocalScope() {

    var myVar =5;
    console.log(myVar);
    }

    myLocalScope();
    console.log(myVar);

50) GLOBAL VS LOCAL SCOPE IN FUNCTIONS
    ** it is possible to have both global & local function in same name.
    when we do this local presedent takes over global variable.


    var outerwear = "T-Shirt"; (it is defined outside the variable hence global variable)

    function myOutfit() {
    return outerWear;
    }
    console.log(myOutfit());

    ** we get t shirt

    or

    function myOutfit() {
 
    var outerWear = "sweater";

    return outerWear;
    }

    console.log(myOutfit());

    ** we get sweater (because sweater is local variable)


    if we console.log(outerwear); we get t shirt.



51) RETURN A VALUE FROM A FUNCTION WITH RETURN


    function minusSeven(num) {
    return num - 7;
    }

    console.log(minusSeven(10));


52) UNDERSTANDING UNDEFINED VALUE RETURNED FROM A FUNCTION 

    var sum = 0;
    function addThree() {
    sum = sum + 3;
    }

    function addFive() {
    sum += 5;
    }

53) ASSIGNMENT WITH A RETURNED VALUE

    var changed = 0;
    function change(num) {
    return (num + 5) / 3;(this value will be stored in changed
    }
    changed = change(10);

54)NEXT IN LINE

   function nextInLine(arr, item) {

   // Your code here

   arr.push(item);
   return arr.shift();
   }

   var testArr = [1,2,3,4,5];
   console.log("Before: " + JSON.stringify(testArr));
   console.log(nextInLine(testArr, 6));
   console.log("After: " + JSON.stringify(testArr));

   we get
   Before: [1,2,3,4,5]
   1
   After: [2,3,4,5,6]


55) BOOLEAN VALUES

    BOOLEAN VALUES

    ** another data type it has only 2 types (TRUE/FALSE)
    basically on/off switches 
    they dont use quotation marks

    function welcomeToBooleans() {
    return false;
    }

56) USE CONDITIONAL LOGIC WITH IF STATEMENTS
    ** if "if" statement is used to make decision in code


    //Exmaple

     function ourTrueOrFalse(isItTrue) {

    if (isItTrue) {

   return "yes, it's true";
    }
   return "No, it's false";
}

57) COMPARISON WITH THE EQUALITY OPERATOR
   ** another operator for true or false.

    // Example

    function testEqual(val) {

    if (val==12) { // Chnage this line(**= sign is assign operator so we use == to indicate equal)

   return "Equal";
   }
    return "Not Equal";
  }

  // Change this value to test
  testEqual(10);  

   ** console.log(testEqual(10));

   we get "Not Equal"


   function testEqual(val) {

   if (val==12) { // Chnage this line(**= sign is assign operator so we use == to indicate equal)



 
58) COMPARISON WITH THE STRICT EQUALITY OPERATOR

    === MEANS STRICT EQUAL SYMBOL

  
59) PRACTICE COMPARING DIFFERENT VALUES

 // Setup

function compareEquality(a, b) {

if (a == b) { // Change this line (** this uses type converter)

return "Equal";
}
return "Not Equal";
}

// Change this value to test 
console.log(compareEquality(10, "10"));

**we get equal

but

if (a === b) then because of the string we get not equal for the above value. 


60) COMPARISION WITH THE INEQUALITY OPEARATOR

!= MEANS NOT EQUAL SIGN


// Setup

function testNotEqual(val) {

if (val != 99) { // Change this line (** this uses type converter)

return " Not Equal";
}
return " Equal";
}

// Change this value to test 
console.log(testNotEqual(10));

 we get not equal.


61) COMPARISION WITH THE STRICT INEQUALITY OPERATOR

** same as 57 ex

// Setup

function testStrictNotEqual(val) {

// Only change code below this line

if (val !== 17) {


// Only change code above this line

return " Not Equal";
}
return " Equal";
}

// Change this value to test 
console.log(testStrictNotEqual(10));

 we get not equal.



62) COMPARISIONS WITH THE LOGICAL AND OPERATOR

    function testGreaterThan(val) {
    if (val > 100) { // change this line
    return "Over 100";
    }
    if (val > 10) { // change this line
    return "Over 10";  
    }

    console.log(testGreaterThan(10));


63) COMPARISIONS WITH THE GREATER THAN OR EQUAL TO OPERATOR


    function testGreaterOrEqual(val) {
    if (val >= 20) { // change this line
    return "20 or Over";
    }
    if (val >= 10) { // change this line
    return "10 or over";
    }
return "less than 10";

// change this value to test

    console.log(testGreaterOrEqual(10));


64) COMPARISIONS WITH THE LESS THAN OPERATOR

    function testLessThan(val) {
    if (val < 25) { // change this line
    return "Under 25";
    }
    if (val < 55) { // change this line
    return "Under 55";
    }
    return "55 or Over";

    console.log(testLessThan(10));



65) COMPARISIONS WITH THE LESS THAN OR EQUAL TO OPERATOR

   function testLessOrEqual(val) {
   if (val <= 12) { // change this line
   return "Smaller Than or Equal to 12";
   }
   if (val <= 24) { // change this line
   return "Smaller Than or Equal to 24";
   }
   return "more than 24";

   console.log(testGreaterOrEqual(10));


66) COMPARISONS WITH THE LOGICAL AND OPERATOR

    ** sometimes we check two things are true at the same time.


    function testlogicalAnd(val) {
    if (val <=50 && val >= 25) {
    return "yes";
    }
    return "No";
    }

    testLogicalAnd(10);


**instead of using below method we should prefer above method.
 if (val <= 50) {
if (val >=25) {
return "yes";





67) COMPARISONS WITH THE LOGICAL OR OPERATOR

|| OR SYMBOL


    function testlogicalOr(val) {
    if (val < 10 || val > 20) {
    return "Outside";
    }
    return "Inside";
    }

    testLogicalOr(15);



68) ELSE STATEMENTS

    **  to address multiple conditions


    function testElse(val) {
    var result = "";
    if (val > 5) {
    result = "Bigger than 5";
    } else {
    result = "5 or smaller";
    return result;
    }

    testElse(4);


69) ELSE IF STATEMENTS

   function testElseIf(val) {
   if (val > 10) {
   return "Greater than 10";
   }
   if (val < 5) {
   return "Smaller than 5";
   }
   return "Between 5 and 10";
   }

   testElseIf(7);



use below method instead



   function testElseIf(val) {
   if (val > 10) {
   return "Greater than 10";
   } else if (val < 5) {
   return "Smaller than 5";
   } else {
   return "Between 5 and 10";
   }
   }

// change this value to test
testElseIf(7);



70) LOGICAL ORDER IN IF ELSE STATEMENTS

** when you are using else if statement order is very important
** it checks the fist condition, if its true then it doesnt care about second condition.
if we put (10) 1st and (5) 2nd means , if we console number 3 means it will show less than 10 instead of showing less than 5.



   function orderMyLogic(val) {
   if (val < 5) {
   return "Less than 5";
   } else if (val < 10) {
   return "less than 10";
   } else {
   return "Greater than or equal to 10";
   }
   }

console.log(orderMyLogic(3));



71) CHAINING IF ELSE STATEMENTS
    ** CONDITION IS ALWAYS IN PRANTACIS ()

    function testSize(num) {
    if (num < 5) {
    return "Tiny"
    } else if (num < 10) {
    return "small"
    } else if (num < 15) {
    return "medium"
    } else if (num < 20) {
    return "large"
    } else {
    return "huge"
    }
    }

    console.log(testSize(7));


72)  GOLF CODE

var names = ["Hole-in-one!", "Eagle", "Birdie", "Par", "Bogey", "Double Bogey", "Go Home"]


function golfScore(par, strokes) {
if (strokes == 1) {
return names[0]
}  else if (strokes <= par - 2) {
return names[1]
}  else if (strokes == par - 1) {
return names[2]
}  else if (strokes <= par ) {
return names[3]
}  else if (strokes == par + 1) {
return names[4]
}  else if (strokes == par + 2) {
return names[5]
}  else if (strokes >= par + 3) {
return names[6]

}

}




// change these values to test

golfScore(5,4);


72) SWITCH STATEMENTS

** instead using chained statements use switch statements.

function caseInSwitch(val) {
var answer = "";

switch(val) {
case 1:
answer = "alpha";
break;
case 2:
answer = "beta";
break;
case 3:
answer = "gamma";
break;
case 4:
answer = "delta";
break;
}
return answer;
}

// change this value to test
console.log(caseInSwitch(2))
we get "beta"
** if you dont use break statement then it will run to next case automatically.


73) DEFAULT OPTION IN SWITCH STATEMENTS

** default option is kind of like else

function switchOfStuff(val) {
var answer = "";

switch(val) {
case "a":
answer = "apple";
break;
case "b":
answer = "bird";
break;
case "c":
answer = "stuff";
break;
default:
answer = "stuff";
break;

}

return answer;

}


// change this value to test

console.log(caseInSwitch(d))

** if any value other than a/b/c is passed then it will show empty string "" because var answer = ""; is assigned.
to avoid that we use default.








74) MULTIPLE IDENTICAL OPTIONS IN SWITCH STATEMENTS

** sometimes we need to switch statements when multiple inputs gives the same amount.


function sequentialSizes(val) {
var answer = "";
switch(val) {
case 1:
case 1:
case 1:
answer = "low";
break;
case 4:
case 5:
case 6:
answer = "mid";
break;
case 7:
case 8:
case 9:
answer = "high";
break;
}
 
// change this value to test

console.log(sequentialSizes((1);

we get low


75) REPLACING IF ELSE CHAINS WITH SWITCH

** sometimes switch statement is more easy to write & reading than chain of else and if else.

function functionToSwitch(val) {
var answer = "";
// only change code below this line

if (val === "bob") {
answer = "marley";
} else if (val === 42) {
answer = "The answer";
} else if (val === 1) {
answer = "There is no #1";
} else if (val === 99) {
answer = "Missed me by this much!";
} else if(val === 7) {
answer = "Ate Nine";
}

// only change code above this line

return answer;
}


** we should not use above method instead we need to use this below method.

var answer = "";
// only change code below this line

switch(val) {
case "bob":
answer = "marley";
break;
case 42:
answer = "The answer";
break;
case 1:
answer = "There is no #1";
break;
case 99:
answer = "Missed me by this much!";
break;
case 7:
answer = "Ate Nine";
break;


like this we can change the chain of if else statement to switch statements.

// only change code above this line

return answer;
}

  
76) RETURNING BOOLEAN VALUES FROM FUNCTIONS


function isLess(a, b) {
if (a < b) {
return true;
} else {
return false;
}
}

console.log(isLess(10, 15))


function isLess(a, b) {
return a < b 
}

console.log(isLess(10, 15))
console.log(isLess(20, 15))


77) RETURNING EARLY PATTERN FROM FUNCTIONS

// setup

function abTest(a, b) {
// only change code below this line

if (a < 0 || b < 0) {
return undefined;
}

// only change code above this line

return Math.round(Math.pow(Math.sqrt(a)+ Math.sqrt(b), 2));

// change values below to test your code.
console.log(abTest(2,2));


78) COUNTING CARDS

*****
low card the count goes up 
middle value card the count stays the same
high card the count goes down
when the count is +ve the player should bet high
when the count is zero or -ve the player should bet low
you can use many ways to write this if else or many ways , program should work however


var count = 0;

function cc(card) {
switch(card) {
case 2:
case 3:
case 4:
case 5:
case 6:
	count++; (++ means it increments one)(if case is 2/3/4/5/6 we gonna add)
	break;					if case is 7/8/9 we gonna do nothing
case 10:					if case is 10/j/q/k/a we gonna sub
case "J":
case "Q":
case "K":
case "A":
		count--; (-- means minus one)
		break;
}

var holdbet = 'Hold'
if (count > 0) {
holdbet = 'bet'
}




return count + " " + holdbet;

}

cc(2); cc(3); cc(7); cc('k'); cc('a');
console.log(cc(4))
we get 1 bet


cc(2); cc(k); cc(10); cc('k'); cc('a');
console.log(cc(4))
we get - 2 hold






79) BUILD JAVASCRIPT OBJECTS
similar to arrays but instead of using indexes it uses property
everything before the colons : is called properties
anything after the colons : is called as values
properties might be any data numbers/ strings/ arrays or any data type.


// Example

var ourDog = {
"name":"camper",
"legs": 4,
"tails": 1,
"friends": ["everything"!]
};

// only change code below this line.

var myDog = {

"name":"quincy",
"legs": 3,
"tails": 2,
"friends": []
};

like this we can create our own object..






80) ACCESSING OBJECT PROPERTIES WITH DOT NOTATION
**there are 2 main ways to access a property on an object.
a) dot notation
B) bracket notation 

// setup

var testObj = {
"hat": "ballcap",
"hat": "ballcap",
"hat": "ballcap",
};


// only change code below this line.


var hatValue = testObj.hat;

var shirtValue = testObj.shirt;




81) ACCESSING OBJECT PROPERTIES WITH BRACKET NOTATION
** you can use bracket notation any time but it is required if the name has space in it.

// setup

var testObj = {
"an entree": "hamburger",
"my side": "veggies",
"the drink": "water",
};


// only change code below this line.


var entreeValue = testObj["an entree"];

var drinkValue = testObj['the drink'];

** both "" & '' can be used to mention



82) ACCESSING OBJECT PROPERTIES WITH VARIABLES

** BRACKET PROPERTIES ARE ALSO BE USED LOOK UP OBJECT PROPERTIES USING VARIABLES

// setup


var testObj = {
12: "Namath",
16: "Montana",
19: "Unitas",
};


// only change code below this line.


var playerNumber = 16;

var player = testObj[playerNumber];




83) UPDATING OBJECT PROPERTIES

// Example

var ourDog = {
"name":"camper",
"legs": 4,
"tails": 1,
"friends": ["everything"!]
};

ourDog.name = "happy camper";

//setup

var myDog = {

"name":"coder",
"legs": 4,
"tails": 1,
"friends": ["freecodecamp campers"]
};

// only change code below this line

myDog.name = "happy coder";


** BY DOING THIS WE CAN THE DOG NAME





84) ADD NEW PROPERTIES TO AN OBJECT

// Example

var ourDog = {
"name":"camper",
"legs": 4,
"tails": 1,
"friends": ["everything"!]
};

ourDog.bark = "bow wow";

//setup

var myDog = {

"name":"coder",
"legs": 4,
"tails": 1,
"friends": ["freecodecamp campers"]
};

// only change code below this line

myDog.['bark'] = "woof!"


** BY DOING THIS WE CAN add new property




85) DELETE PROPERTIES FROM AN OBJECT


// Example

var ourDog = {
"name":"camper",
"legs": 4,
"tails": 1,
"friends": ["everything"!]
};

delete ourDog.bark;

//setup

var myDog = {

"name":"coder",
"legs": 4,
"tails": 1,
"friends": ["freecodecamp campers"]
};

// only change code below this line

delete myDog.tails;


** BY DOING THIS WE CAN delete properties










