


1) Data types & Variables

var, let , const


2) Declaring variables (var a;)


3) Initializing variables (initialsing means var a = 2;)


4) Uninitailising variables (means not set to anything)


5) camelcase (declaration and assignment both should match)     


6)Adding Numbers


7)Substraction Number


8) Multiplaication of Numbers


9) Divsision of Numbers


10)  Incrementing Numbers


11) Incrementing myvar (myvar++;) & Decrmenting myvar  (myvar--;)


12) Decimal Numbers (Anything has a point in it)


13) Multiplying Decimals (2.0 * 2.0)


14) Divide Decimals (10.0 / 2.1)


15) Finding a Reminder (if you divide a number by 2 and remainder is zero then the number is even) 
    (var remainder = 20 % 2;)


16) COMPOUND ASSIGNMENT WITH AUGMENTED ADDITION (+=)

                         var a=3;

    normal way           var a = a + 2;

    augmented addition   a += 2;


17) COMPOUND ASSIGNMENT WITH AUGMENTED  SUBSTRACTION (-=)


18) COMPOUND ASSIGNMENT WITH AUGMENTED MULTIPLICATION (*=)


19) COMPOUND ASSIGNMENT WITH AUGMENTED DIVISION (/=)


20) DECLARE STRING VARIABLES 

    //example

    var firstName = "Alan" 



21) ESCAPING LITERAL QUOTES IN STRINGS

    \escp character to put before quotation marks

    means no longer last character

    var myStr = "I am a \"double quoted\" string inside \"double quotes"";


22) QUOTING STRINGS WITH SINGLE QUOTES

   var myStr = "<a href=\"http://www.example.com\" target=\"_blank\">link</a>;

                                        or

   var myStr = '<a href="http://www.example.com" target="_blank">link</a>';

   single' can also be used to escape instead of \ or we can alos use back text `` at beginging and ending.
   by doing so we can use both single & Double quote



23) ESCAPE SEQUENCE IN STRINGS


     \' single quote

     \" double quote

     \\ backslash

     \b backspace

     \t tab

     \n newline

     \r carraiage return

     \f form feed


     example  // var myStr = "FirstLine\n\t\\SecondLine\nThirdLine";

     ** first line then , new line, tab, then second line, then third line.



24) CONCATENATING STRINGS WITH PLUS OPERATOR

     var myStr = "This is the start. " + "This is the end."
     console.log(myStr);


25) CONCATENATING STRINGS WITH PLUS EQUAL OPERATOR

    var ourStr = "I come first. ";
    ourStr += "I come second. ";



26) CONSTRUCTING STRINGS WITH VARIABLES

    var ourName = " freecodecamp";
    var ourStr = " Hello, our name is " + our name + ", how are you?";


27) APPENDING VARIABLES TO STRINGS

    var anAdjective ="awesome!";
    var ourStr = "freeCodeCamp is ";
    ourStr += anAdjective;


28) FIND LENGTH OF STRING

    var firstNameLength = 0;
    var firstName = "Ada";
    firstNameLength = firstName.length;


29) BRACKET NOTATION TO FIND FIRST CHARACTER IN STRING

    var firstLetterOfFirstName = "";
    var firstName = "Ada";
    firstLetterOfFirstName = firstName[0];


30) BRACKET NOTATION TO FIND NTH CHARACTER IN STRING

    var firstName = "Ada";
    var secondLetterOfFirstName = firstName[1];


31) BRACKET NOTATION TO LAST CHARACTER IN STRING

    var firstName = "Ada";
    var lastLetterOfFirstName = firstName[firstName.length - 1];
        

32) BRACKET NOTATION TO FIND NTH TO LAST CHARACTER IN STRING 

    var firstName = "Ada";
    var thirdToLastLetterOfFirstName = firstName[firstName.length-3];


33) STRING IMMUTABILITY

    (MEANS THEY CANNOT BE ALTERED ONCE CREATED, DOESNT MEAN CANNOT BE CHANGED 
    BUT INDIVIDUAL CHARCTER CANNOT BE CHANGED)

     var myStr = "Jello World";
     myStr[0] = "H"; // Fix me 

     ** if we run this code means we get error

     so we need to do

     myStr = "Hello World";


34) WORD Blanks 

function wordBlanks(myNoun, myAdjective, myVerb, myAdverb) {
var result = "";
result += "The" + myAdjective + " " + myNoun + " "+ myVerb + " to the store " + myAdverb
return result;
}
console.log(wordBlanks("dog", "big", "ran", "quickly"));


35) STORE MULTIPLE VALUES WITH ARRAYS

    arrays allow to store several piece of data in one place.
    arrays always start with the bracket and end with the bracket.
    every element in the array is separated by the comma, 
    in the firt element is the string and second element is the number.we can use any type of data.

    var ourArray = ["John", 23];

36) NESTED ARRAYS 
    when one of the element in array is another array that is called nested array or a multi-dimensional array.

    var ourArray = [["the universe", 42], ["everything", 101010]];


37) ACCESS ARRAY DATA WITH INDEXES

    var ourArray = [50,60,70];
    var ourData = ourArray[0]; // equals 50


38) MODIFY ARRAY DATA WITH INDEXES



39) MODIFY ARRAY DATA WITH INDEXES

    we were not able to modify a string using bracket notation. but with arrays you can.
    var ourArray = [18,64,99];
    ourArray[1] = 45; // ourArray now equals [18, 45, 99].

40) ACCESS MULTI-DIMENSIONAL ARRAYS WITH INDEXES
    to access arrays in array we use double bracket
    1st bracket indicates the set which we want
    2nd bracket indicates the particular element in the bracket

    if we want the number to get 8 means.

    var myArray = [[1,2,3], [4,5,6], [7,8,9], [[10,11,12], 13, 14]];
    var myData = myArray [2][1]


41) MANIPULATE ARRAYS WITH POP()

    ** we can remove an item from an array using pop function.
    ** removes the last element inside the final element.

    var ourArray = [1,2,3];
    var removedFromOurArray = ourArray.pop();
    // removedFromOurArray now equals 3, and ourArray now equals [1,2]


42) MANIPULATE ARRAYS WITH SHIFT ()

   similar to pop but it removes the FIRST ELEMENT INSIDE THE FINAL ELEMENT


43)MANIPULATE ARRAYS WITH push()

   push adds in the last


44) MANIPULATE ARRAYS WITH UNSHIFT ()

   similar with push function while push adds in the last but unshift adds in the beginning.


45) Shopping List

    var myList = [["cereal", 3], ["milk", 2], ["bananas", 3], ["juice", 2], ["eggs", 12]];

